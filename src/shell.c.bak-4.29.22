/*********************************************************************/
/*                                                                   */
/*      Author: Jordan Garcia                                        */
/*      Date:   04/18/2022                                           */
/*      Project:                                                     */
/*                                                                   */
/*          This project is my implementation of a simple shell.     */
/*                                                                   */
/*********************************************************************/

// STEPS:
    // Go down process_commands() function and solve each section one by one

    // Currently working on aliases
        // rather than parse alias and store parsed alias, we can just store the entire unparsed string
        // and append it to the correct location in line, and then parse the entire string once evaluated and connected.

// IDEAS:
    // its possible we can run history like any other command and dont need a custom version
    // store MAX_CMDS in string_module for bounds checking
    // need to free memory used in check_for_alias and anywhere else it may apply even if the calls return FAILURE

    // take out bounds checking and make functions more general purpose with one or 2 specific fucntions

// BUGS:
    // Cannot do redirection with echo...

// NEXT STEPS:
    // 0) Figure out how to do 'cd -'
    // 1) Revise documentation to make sure every thing is accurate
    // 2) figure out why shell sometimes takes 2 exits
    // 3) fix any ineffecient areas of the system
    // 4) add ability to read in permanent aliases from .j_profile
    // 5) add any other features you think of! :D
    // 6) make sure memory leaks don't exist

    // CLEARLY DEFINE WHAT A WORD IS INTERPRETTED AS BY THE PROGRAM IN THE README

/* standard libraries */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <sys/wait.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

/* for custom libraries */
#include "../lib/alias.h"
#include "../lib/string_module.h"
#include "../lib/command_history.h"
// #include "../lib/execution.h"

/* macros */
#define PROMPT_SIZE 255
#define N_TERM '\0'
#define FAILURE 0
#define SUCCESS 1
#define QUOTE_MARKER "**"
#define OLDPWD "OLDPWD"
#define PWD "PWD"
#define USER "USER"
#define HOST "HOST"


// global variables 
char*   cmds[MAX_CMDS]; 
int     n_cmds = 0; 
int     n_pipes = 0; 
char    current_path[PROMPT_SIZE];
char*   prev_dir = NULL; 

// utility function prototypes 
void    start_shell( void );
void    parse_input( char* );
int     process_commands( void );

// history handling 
int     handle_history( void );

// alias handling 
int     handle_aliases( void );
int     check_for_alias( void );

// env variable handling 
int     handle_env_vars( void );
int     convert_env_var( int );
int     check_for_var_in_quotes( int i );

// directory change handling 
int     handle_directory_change( void );

// program execution function prototypes 
// int     handle_program_execution( void );

// helper function (low level) 
int     is_directory( const char* );
int     is_reg_file( const char* );
int     is_redirection( void );
int     is_pipe( void );
void    print_commands( void );
void    count_pipes( void );


/*********************************************************************/
/*                                                                   */
/*      Function name: main()                                        */
/*      Return type:   int                                           */
/*      Parameter(s):  None                                          */
/*      Description:                                                 */
/*          main() will start the shell.                             */
/*                                                                   */
/*********************************************************************/
int main( void )
{
    start_shell();
    return EXIT_SUCCESS;
} /* end main */


/*********************************************************************/
/*                                                                   */
/*      Function name: start_shell                                   */
/*      Return type:   void                                          */
/*      Parameter(s):  None                                          */
/*      Description:                                                 */
/*          start_shell() will begin a loop prompting the user       */
/*          for commands and call functions to tokenize and process  */
/*          those commands.                                          */
/*                                                                   */
/*********************************************************************/
void start_shell( void )
{
    char prompt[PROMPT_SIZE];
    char* line = NULL;
    int i;
    
    // assign prompt for readline 
    if( getenv(HOST) == NULL )
        sprintf( prompt, "%s@UnknownHost> ", getenv(USER) );
    else
        sprintf( prompt, "%s@%s> ", getenv(USER), getenv(HOST) );

    // initialize cmds to NULL
    for( i = 0; i < MAX_CMDS; i++ )
        cmds[i] = NULL;

    // begin infinite loop that is the shell 
    while ( 1 )
    {
        // prompt then read line - line is allocated with malloc(3) 
        line = readline(prompt);

        // check if user wants to exit the shell 
        if ( strcmp( line, "exit" ) == 0 )
        {
            free( line );
            free_history();
//            free_aliases();
            return;
        }
        else if( parse_string( line, cmds, &n_cmds ) == FAILURE )
           ; 
        else if(n_cmds > 0)
        {
            print_commands();

            // process parsed commands 
            process_commands();
            print_commands();
        }

        // add command to history
        add_to_history( line );

        // free all memory 
        free( line );
        printf("n_cmds = %d\n", n_cmds );
        for ( int i = 0; i < n_cmds; i++ )
        {
            puts("freeing");
            free( cmds[i] );
            cmds[i] = NULL;
        }
//        puts("done");

        // reset counters 
        n_cmds = 0;
        n_pipes = 0;
    puts("got here");
    }

    return;
} /* end start_shell() */


/*********************************************************************/
/*                                                                   */
/*      Function name: process_commands                              */
/*      Return type:   int                                           */
/*      Parameter(s):  none                                          */
/*                                                                   */
/*      Description:                                                 */
/*          Handles parsed commands for appropriate processing.      */
/*                                                                   */
/*********************************************************************/
int process_commands( void )
{
    /* error checking */
    if( n_cmds == 0 )
    {
        fprintf( stderr, "No commands to process.\n" );
        return FAILURE;
    }

    // handle printing of history
    if( handle_history() == SUCCESS )
        return SUCCESS; 

    // handle all alias processing 
    if( handle_aliases() == FAILURE )
        return FAILURE;

    // handle environmental variable translations
    if( handle_env_vars() == FAILURE )
        return FAILURE;

    // handle directory changes
//    if( handle_directory_change() == SUCCESS )
//        return SUCCESS; 
        
    // handle program execution
//    handle_program_execution();

    return SUCCESS;
}/* end process_commands */


/*********************************************************************/
/*                                                                   */
/*      Function name: handle_history                                */
/*      Return type:   int                                           */
/*      Parameter(s):  none                                          */
/*                                                                   */
/*      Description:                                                 */
/*          prints history of commands entered.                      */
/*                                                                   */
/*********************************************************************/
int handle_history( void )
{
    if ( strcmp( cmds[0], "history" ) == 0 )
    {
        print_history( stdout ); 
        return SUCCESS;
    }
    return FAILURE;
} /* end handle_history() */


/*********************************************************************/
/*                                                                   */
/*      Function name: check_for_alias                               */
/*      Return type:   int                                           */
/*      Description:                                                 */
/*          Checks for aliases and converts them if found.           */
/*          Return failure anytime an alias isnt being translated.   */
/*          This is done so that way we know when we dont need to    */
/*          use the alias any further.                               */
/*                                                                   */
/*********************************************************************/
int handle_aliases( void )
{
    // case found keyword "alias"
    if ( strcmp( cmds[0], "alias" ) == 0 )
    {
        // if alias is only command
        if( n_cmds == 1 )
        {
            print_aliases();
            return FAILURE;
        }
        else if( n_cmds == 2 )
        {
            // if we want to display a specified alias
            alias* specified = NULL;

            // search for specified alias
            if( ( specified = find_alias( cmds[1] ) ) == NULL )
            {
                fprintf( stderr, "Error: could not find alias - %s\n" , cmds[1] );
                return FAILURE;
            }
            
            // show specified alias
            printf( "%s\t%s\n", specified->name, specified->value );
            return FAILURE;
        }
        else if( n_cmds == 4 ) 
        {
            // if adding alias, parser should separate into 4 commands
            if( add_alias( cmds[1], cmds[3] ) == FAILURE )
                fprintf( stderr, "Error: could not add alias %s\n", cmds[3] );
    
            return FAILURE;
        }
            
        // if it does not match above patterns, return
        fprintf( stderr, "Error: no alias specified to add.\n" );
        return FAILURE;
    }
    else if ( strcmp( cmds[0], "unalias" ) == 0 )
    {
        // make sure user provided an alias name
        if( n_cmds < 2 )
        {
            fprintf( stderr, "Error: no alias specified to remove.\n" );
            return FAILURE;
        }
        remove_alias( cmds[1] );
        return FAILURE;
    }
    else
        check_for_alias();    

    return SUCCESS; 
} /* end handle_aliases() */


/*********************************************************************/
/*                                                                   */
/*      Function name: handle_env_vars                               */
/*      Return type:   int                                           */
/*      Parameter(s):  none                                          */
/*                                                                   */
/*      Description:                                                 */
/*          Checks for environmental variables and calls conversion  */
/*          function.                                                */
/*                                                                   */
/*********************************************************************/
int handle_env_vars( void )
{
    int i;

    // go through environmental variable
    for( i = 0; i < n_cmds; i++ )
    {
        // if we find an environmental variable - not in quotes
        if( strcmp( cmds[i], "$" ) == 0 )
        {
            // if conversion fails
            if ( convert_env_var( i ) == FAILURE )
            {
                fprintf( stderr, "Error: could not convert environtmental variable - %s\n", cmds[i + 1] );
                return FAILURE;
            }

            // cmds have been shifted down, so account for it
            i--; 
        } 
        else // check for possible environmental variables in quoted cmd
            check_for_var_in_quotes( i );
    }
    return SUCCESS; 
} /* end handle_env_vars() */


/*********************************************************************/
/*                                                                   */
/*      Function name: handle_directory_change                       */
/*      Return type:   int                                           */
/*      Parameter(s):  none                                          */
/*                                                                   */
/*      Description:                                                 */
/*          Determines and conducts directory change if needed.      */
/*                                                                   */
/*********************************************************************/
int handle_directory_change( void )
{
    char* tmp_pwd = NULL;

    /* ensure we want to switch directories */
    if ( strcmp( cmds[0], "cd" ) != 0 )
        return FAILURE;

    /* switching to home directory */
    if ( n_cmds == 1 || 
         strcmp( cmds[1], "~/" ) == 0 || 
         strcmp( cmds[1], "~" ) == 0 
       )
    {
        if( is_directory( getenv( "HOME" ) ) != 0 )
        {
            if( chdir( getenv( "HOME" ) ) != 0 )
            {
                printf("Error: Cannot switch to HOME directory.\n" );
                return FAILURE;
            }
            else
            {
                /* record current directory for cd - */
                prev_dir = getenv( "PWD" );

                setenv( PWD, getenv( "HOME" ), 1 );
                return SUCCESS; 
            }
        }
    }

    /* switching to previous directory */
    if ( n_cmds == 1 || strcmp( cmds[1], "-" ) == 0 )
    {
        if ( chdir( prev_dir ) != 0 )
        {
            printf( "Error: Cannot change to previous directory.\n" );
            return FAILURE;   
        }
        return SUCCESS; 
    }

    prev_dir = getenv( "PWD" );

    /* switching to any other directory */
    if ( chdir( cmds[1] ) != 0 )
    {
        printf( "Error: Cannot change directory to %s\n", cmds[1] );
        return FAILURE;
    } 

    return SUCCESS;
} /* end handle_directory_change() */


/*********************************************************************/
/*                                                                   */
/*      Function name: handle_program_execution                      */
/*      Return type:   int                                           */
/*      Parameter(s):  none                                          */
/*                                                                   */
/*      Description:                                                 */
/*          Routes all program execution to their respected          */
/*          functions.                                               */
/*                                                                   */
/*********************************************************************/
//int handle_program_execution( void )
//{
//    int r_flag = is_redirection(); 
//    int p_flag = is_pipe();
//
//    count_pipes(); // should this be here? 
//
//    switch ( r_flag )
//    {
//        case INPUT:
//            // input redirection
//            if ( p_flag == SUCCESS )
//                ;//redirect_input_and_pipe();
//
//            redirect_input();
//            break;
//        case OUTPUT:
//            // output redirection
//            if ( p_flag == SUCCESS )
//                ;//redirect_output_and_pipe();
//
//            redirect_output(); 
//            break;
//        case INOUT:
//            // input & output redirection
//            if ( p_flag == SUCCESS )
//                ;//redirect_both_and_pipe();
//
//            redirect_input_and_output();
//            break;
//        default:
//            // no redirection
//            if ( p_flag == SUCCESS )
//                execute_and_pipe( n_pipes ); 
//            else
//                execute();
//
//            break; 
//    }
//    return SUCCESS;
//} /* end handle_program_execution() */


/*********************************************************************/
/*                                                                   */
/*      Function name: check_for_alias                               */
/*      Return type:   void                                          */
/*      Parameter(s):  none                                          */
/*                                                                   */
/*      Description:                                                 */
/*          checks for aliases and converts them if found            */
/*                                                                   */
/*********************************************************************/
int check_for_alias( void ) 
{
    alias* found;
    char* alias_cmds[MAX_CMDS];
    int i, j, n_alias_cmds = 0;

    // go through commands
    for( i = 0; i < n_cmds; i++ )
    {
        // check if command is an alias
        if( ( found = find_alias( cmds[i] ) ) != NULL )
        {
            // parse alias value
            if( parse_string( found->value, alias_cmds, &n_alias_cmds ) == FAILURE )
            {
                fprintf( stderr, "Error: could not parse alias value\n" );
                return FAILURE;
            }

            // place alias value into cmds[]
            if( merge_string_arrays( cmds, n_cmds, alias_cmds, n_alias_cmds, i ) == FAILURE )
            {
                fprintf( stderr, "Error: could not merge alias value into cmds\n" );
                return FAILURE;
            }

            // adjust n_cmds
            n_cmds += ( n_alias_cmds - 1 );

            // clear alias_cmds and reset n_alias_cmds in case we find more aliases
            for( j = 0; j < n_alias_cmds; j++ )
            {
                free( alias_cmds[j] );
                alias_cmds[j] = NULL;
            }
            n_alias_cmds = 0;
        }
    }
    return SUCCESS; 
} /* end check_for_alias() */


/*********************************************************************/
/*                                                                   */
/*      Function name: check_for_var_in_quotes                       */
/*      Return type:   void                                          */
/*      Parameter(s):                                                */
/*          int i: the index of the str in cmds[] we are searching   */
/*                                                                   */
/*      Description:                                                 */
/*          checks for env variables inside of a string,             */
/*          it is used to search through quoted commands for         */
/*          env vars                                                 */
/*                                                                   */
/*********************************************************************/
int check_for_var_in_quotes( int i )
{
    char* loc = NULL, * loc2 = NULL, * translated_env_var = NULL; 
    char env_var[WORD_LIMIT] = "", buffer[WORD_LIMIT] = "";
    int j;

    if( ( loc = strstr( cmds[i], "$" ) ) != NULL )
    {
        // copy everything up to env var into buffer
        strncpy( buffer, cmds[i], loc - cmds[i] );

        // gather, convert, and append env var
        do 
        {
            // env variables don't start with digits
            if( isdigit( *(loc++) ) )
                continue; 

            // copy characters in between env vars if found multiple
            if( loc != loc2 && loc2 != NULL )
                strncat( buffer, loc2, (int)(loc - loc2 - 1) );

            // clear out env_var[]
            memset( env_var, 0, WORD_LIMIT * sizeof( char ) );

            // get the var name
            for( j = 0; !isspace( *loc ) && !ispunct( *loc ) && !isdigit( *loc ) && *loc != '\0' && *loc != '$'; j++ )
                env_var[j] = *(loc++); 

            // translate env var & append to buffer
            if( ( translated_env_var = getenv( env_var ) ) == NULL )
            {
                fprintf( stderr, "Error: could not find env var $%s\n", env_var );
                return FAILURE;
            }
            else if( strlen( buffer ) + strlen( translated_env_var ) < WORD_LIMIT )
                strcat( buffer, translated_env_var );
            else
            {
                fprintf( stderr, "Error: command too large after appending environmental variable $%s\n", env_var );
                fprintf( stderr, "       command before attempt to append: %s\n", buffer );
                return FAILURE;
            }

            // store end location of var name
            loc2 = loc;
        }
        while( ( loc = strstr( loc2, "$" ) ) != NULL );

        // copy the remainder of cmds[i] into buffer
        if( strlen( buffer ) + strlen( &cmds[i][loc2 - cmds[i]] ) < WORD_LIMIT )
            strcat( buffer, &cmds[i][loc2 - cmds[i]] );
        else
        {
            fprintf( stderr, "Error: command too large after appending last part (%s)\n", &cmds[i][loc2 - cmds[i]] );
            return FAILURE;
        }

        // replace cmds[i] with buffer
        free( cmds[i] );
        add_string( buffer, cmds, i );
    }

    return SUCCESS; 
} /* end check_for_var_in_quotes() */


/*********************************************************************/
/*                                                                   */
/*      Function name: handle_env_vars                               */
/*      Return type:   int                                           */
/*      Parameter(s):  none                                          */
/*                                                                   */
/*      Description:                                                 */
/*          checks for environmental variables and converts cmds[]   */
/*          so that it has variable value                            */
/*                                                                   */
/*********************************************************************/
int convert_env_var( int index )
{
    // get variable value
    char* env_var = getenv( cmds[index + 1] );
    
    // case env var not found, exit gracefully
    if( env_var == NULL )
    {
        fprintf( stderr, "Error: could not translate environmental variable - %s\n", cmds[index + 1] );
        return FAILURE; 
    }

    // remove variable name
    free( cmds[index + 1] );

    // replace with variable value
    if( add_string( env_var, cmds, index + 1 ) == FAILURE )
    {
        fprintf( stderr, "Error: could not place environmental variable in cmds - %s\n", env_var );
        return FAILURE;
    }
    
    // shift all cmds down by one, starting at index + 1
    if( shift_strings_down( cmds, &n_cmds, index + 1, 1 ) == FAILURE )
    {
        fprintf( stderr, "Error: convert_env_var() - could not shift cmds to remove '$'\n" );
        return FAILURE;
    }
    return SUCCESS;
} /* end convert_env_var() */




/*********************************************************************/
/*                                                                   */
/*                    HELPER FUNCTIONS (LOW LEVEL)                   */
/*                                                                   */
/*********************************************************************/




/*********************************************************************/
/*                                                                   */
/*      Function name: is_redirection                                */
/*      Return type:   int                                           */
/*      Parameter(s):  None                                          */
/*                                                                   */
/*      Description:                                                 */
/*          returns a value depending on type of redirection.        */
/*              0: no redirection                                    */
/*              1: output redirection                                */
/*             -1: input redirection                                 */
/*              2: both input and output redirection.                */
/*                                                                   */
/*********************************************************************/
int is_redirection( void )
{
    int ctr = 0;
    int o_flag = FAILURE, i_flag = FAILURE;

    for ( ; ctr < n_cmds; ctr++ )
    {
        if ( strcmp( cmds[ctr], "<" ) == 0 )
            i_flag = SUCCESS;

        if ( strcmp( cmds[ctr], ">" ) == 0 )
            o_flag = SUCCESS; 
    }

    if ( o_flag == SUCCESS && i_flag == SUCCESS )
        return 0;
    else if ( o_flag == SUCCESS ) 
        return 0;
    else if ( i_flag == SUCCESS )
        return 0;

    return FAILURE; 
} /* end is_redirection() */


/*********************************************************************/
/*                                                                   */
/*      Function name: is_pipe                                       */
/*      Return type:   int                                           */
/*      Parameter(s):  None                                          */
/*                                                                   */
/*      Description:                                                 */
/*          returns a value depending on type of redirection.        */
/*              0: no pipe                                           */
/*              1: pipe                                              */
/*********************************************************************/
int is_pipe( void )
{
    return ( n_pipes == 0 ? FAILURE : SUCCESS );
} /* end is_pipe() */


/*********************************************************************/
/*                                                                   */
/*      Function name: print_commands                                */
/*      Return type:   void                                          */
/*      Parameter(s):  None                                          */
/*                                                                   */
/*      Description:                                                 */
/*          Prints the array of strings containing the parsed        */
/*          command line.                                            */
/*                                                                   */
/*********************************************************************/
void print_commands( void )
{
    puts(" ");
    for ( int i = 0; i <= n_cmds; i++ )
        printf( "command %d: %s\n", i, cmds[i] );

    return;
} /* end print_commands() */


/*********************************************************************/
/*                                                                   */
/*      Function name: is_directory                                  */
/*      Return type:   int                                           */
/*      Parameter(s):  1                                             */
/*              const char*: directory name                          */
/*                                                                   */
/*      Description:                                                 */
/*          determines if filename is a directory                    */
/*                                                                   */
/*********************************************************************/
int is_directory( const char* filename )
{
    struct stat buffer;
    if( stat( filename, &buffer ) != 0 )
        return 0;
    
    return S_ISDIR( buffer.st_mode );
} /* end is_directory() */


/*********************************************************************/
/*                                                                   */
/*      Function name: file_exists                                   */
/*      Return type:   int                                           */
/*      Parameter(s):  1                                             */
/*              const char*: file name                               */
/*                                                                   */
/*      Description:                                                 */
/*          determines if file exists                                */
/*                                                                   */
/*********************************************************************/
int is_reg_file( const char* fileName )
{
    struct stat buffer;
    if( stat( fileName, &buffer ) != 0 )
        return 0;

    return S_ISREG( buffer.st_mode );
} /* end is_reg_file() */


/*********************************************************************/
/*                                                                   */
/*      Function name: count_pipes                                   */
/*      Return type:   void                                          */
/*      Parameter(s):  None                                          */
/*                                                                   */
/*      Description:                                                 */
/*          counts the number of pipes in the current command        */
/*                                                                   */
/*********************************************************************/
void count_pipes( void )
{
    int i;
    for( i = 0; i < n_cmds; i++ )
    {
        if( strcmp( cmds[i], "|" ) == 0 )
            n_pipes += 1;
    }
}

